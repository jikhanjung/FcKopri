#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const crypto = require('crypto');
const { createClient } = require('@supabase/supabase-js');

// ÌôòÍ≤Ω Î≥ÄÏàò Î°úÎìú
require('dotenv').config();

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

const MIGRATIONS_DIR = path.join(__dirname, '../sql/migrations');
const SETUP_DIR = path.join(__dirname, '../sql/setup');

// ÌååÏùº Ï≤¥ÌÅ¨ÏÑ¨ Í≥ÑÏÇ∞
function calculateChecksum(content) {
  return crypto.createHash('md5').update(content).digest('hex');
}

// ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò ÌååÏùº Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞
function getMigrationFiles() {
  const files = fs.readdirSync(MIGRATIONS_DIR)
    .filter(file => file.endsWith('.sql'))
    .sort(); // ÌååÏùºÎ™Ö ÏàúÏÑúÎåÄÎ°ú Ï†ïÎ†¨
  
  return files.map(file => {
    const filePath = path.join(MIGRATIONS_DIR, file);
    const content = fs.readFileSync(filePath, 'utf8');
    const version = file.replace('.sql', '');
    
    // ÌååÏùºÏùò Ï≤´ Î≤àÏß∏ Ï£ºÏÑùÏóêÏÑú ÏÑ§Î™Ö Ï∂îÏ∂ú
    const descMatch = content.match(/^--\s*(.+)/);
    const description = descMatch ? descMatch[1].trim() : version;
    
    return {
      version,
      description,
      content,
      checksum: calculateChecksum(content)
    };
  });
}

// Ï†ÅÏö©Îêú ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞
async function getAppliedMigrations() {
  try {
    const { data, error } = await supabase
      .from('schema_migrations')
      .select('version, checksum')
      .order('version');
    
    if (error) throw error;
    return data || [];
  } catch (error) {
    // ÌÖåÏù¥Î∏îÏù¥ ÏóÜÏúºÎ©¥ Îπà Î∞∞Ïó¥ Î∞òÌôò
    if (error.message.includes('relation "schema_migrations" does not exist')) {
      return [];
    }
    throw error;
  }
}

// SQL Ïã§Ìñâ (Supabase CLI ÏÇ¨Ïö©)
async function executeSql(sql, description) {
  console.log(`üìÑ Executing: ${description}`);
  
  try {
    // ÏûÑÏãú ÌååÏùºÏóê SQL Ï†ÄÏû•
    const tempFile = path.join(__dirname, 'temp_migration.sql');
    fs.writeFileSync(tempFile, sql);
    
    // Supabase CLIÎ°ú Ïã§Ìñâ (Ïã§Ï†ú Íµ¨ÌòÑÏãúÏóêÎäî child_process.exec ÏÇ¨Ïö©)
    console.log(`‚ö†Ô∏è  Manual execution required:`);
    console.log(`   supabase db push --db-url "your-connection-string" --file ${tempFile}`);
    console.log(`   Or execute the SQL manually in Supabase SQL Editor`);
    
    // ÏûÑÏãú ÌååÏùº ÏÇ≠Ï†ú
    fs.unlinkSync(tempFile);
    
    console.log(`‚úÖ Prepared: ${description}`);
  } catch (error) {
    console.error(`‚ùå Failed: ${description}`);
    console.error(`Error: ${error.message}`);
    throw error;
  }
}

// ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò Í∏∞Î°ù
async function recordMigration(migration) {
  const { error } = await supabase
    .from('schema_migrations')
    .insert({
      version: migration.version,
      description: migration.description,
      checksum: migration.checksum
    });
  
  if (error) throw error;
}

// Ï¥àÍ∏∞ ÏÑ§Ï†ï Ïã§Ìñâ (ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò Ï∂îÏ†Å ÌÖåÏù¥Î∏î ÏÉùÏÑ±)
async function runInitialSetup() {
  const trackerFile = path.join(SETUP_DIR, '00_migration_tracker.sql');
  if (fs.existsSync(trackerFile)) {
    const content = fs.readFileSync(trackerFile, 'utf8');
    await executeSql(content, 'Migration tracker setup');
  }
}

// ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò Ïã§Ìñâ
async function runMigrations() {
  console.log('üöÄ Starting database migration...\n');
  
  try {
    // 1. Ï¥àÍ∏∞ ÏÑ§Ï†ï Ïã§Ìñâ
    await runInitialSetup();
    
    // 2. ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò ÌååÏùº Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞
    const allMigrations = getMigrationFiles();
    console.log(`üìã Found ${allMigrations.length} migration files\n`);
    
    // 3. Ï†ÅÏö©Îêú ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞
    const appliedMigrations = await getAppliedMigrations();
    const appliedVersions = new Set(appliedMigrations.map(m => m.version));
    
    // 4. Ï≤¥ÌÅ¨ÏÑ¨ Í≤ÄÏ¶ù
    for (const applied of appliedMigrations) {
      const current = allMigrations.find(m => m.version === applied.version);
      if (current && current.checksum !== applied.checksum) {
        console.warn(`‚ö†Ô∏è  Warning: ${applied.version} has been modified since it was applied`);
      }
    }
    
    // 5. ÎØ∏Ï†ÅÏö© ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò Ïã§Ìñâ
    const pendingMigrations = allMigrations.filter(m => !appliedVersions.has(m.version));
    
    if (pendingMigrations.length === 0) {
      console.log('‚ú® All migrations are up to date!');
      return;
    }
    
    console.log(`üîÑ Running ${pendingMigrations.length} pending migrations:\n`);
    
    for (const migration of pendingMigrations) {
      await executeSql(migration.content, migration.description);
      await recordMigration(migration);
      console.log(`üìù Recorded: ${migration.version}\n`);
    }
    
    console.log('üéâ All migrations completed successfully!');
    
  } catch (error) {
    console.error('üí• Migration failed:', error.message);
    process.exit(1);
  }
}

// ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò ÏÉÅÌÉú ÌôïÏù∏
async function showStatus() {
  console.log('üìä Migration Status:\n');
  
  try {
    const allMigrations = getMigrationFiles();
    const appliedMigrations = await getAppliedMigrations();
    const appliedVersions = new Set(appliedMigrations.map(m => m.version));
    
    console.log('Version | Status | Description');
    console.log('--------|--------|------------');
    
    for (const migration of allMigrations) {
      const status = appliedVersions.has(migration.version) ? '‚úÖ Applied' : '‚è≥ Pending';
      console.log(`${migration.version.padEnd(7)} | ${status.padEnd(8)} | ${migration.description}`);
    }
    
    const pendingCount = allMigrations.length - appliedMigrations.length;
    console.log(`\nüìà Total: ${allMigrations.length} migrations`);
    console.log(`‚úÖ Applied: ${appliedMigrations.length}`);
    console.log(`‚è≥ Pending: ${pendingCount}`);
    
  } catch (error) {
    console.error('Failed to get migration status:', error.message);
    process.exit(1);
  }
}

// CLI Ï≤òÎ¶¨
const command = process.argv[2];

switch (command) {
  case 'run':
    runMigrations();
    break;
  case 'status':
    showStatus();
    break;
  default:
    console.log('Usage:');
    console.log('  npm run migrate:run    - Run pending migrations');
    console.log('  npm run migrate:status - Show migration status');
    break;
}